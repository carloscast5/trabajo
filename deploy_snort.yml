---
- name: Desplegar la máquina virtual snort en Proxmox
  hosts: proxmox
  gather_facts: yes
  become: true
  vars:
    proxmox_api_host: "{{ ansible_host }}"
    proxmox_api_user: "root@pam"
    proxmox_api_password: "carlos"
    vm:
      name: "snort"
      vmid: 105
      memory: 2048
      cores: 2
      disk_size: "20G"
      volume_group: "pve"
      thin_pool: "data"
      cloud_image: "/var/lib/vz/template/iso/jammy-server-cloudimg-amd64.img"
      user: "carlos"
      password: "carlos"
      storage: "local-lvm"
      static_ip: "192.168.100.10"
      gateway: "192.168.100.3"
      dns_servers: "8.8.8.8 8.8.4.4"

  tasks:
    - name: Instalar pip y librerías necesarias en Proxmox
      apt:
        name:
          - python3-pip
          - python3-setuptools
          - qemu-guest-agent
        state: present

    - name: Instalar la librería proxmoxer (si es necesario) en Proxmox
      pip:
        name: proxmoxer
        state: present

    - name: Instalar la librería passlib (si es necesario) en Proxmox
      pip:
        name: passlib
        state: present

    - name: Instalar whois en localhost para mkpasswd
      delegate_to: localhost
      apt:
        name: whois
        state: present

    - name: Generar contraseña encriptada para el usuario en localhost
      delegate_to: localhost
      command: mkpasswd --method=SHA-512 --rounds=4096 {{ vm.password }}
      register: encrypted_password

    - name: Crear la máquina virtual sin disco
      command: >
        qm create {{ vm.vmid }}
        --name {{ vm.name }}
        --memory {{ vm.memory }}
        --cores {{ vm.cores }}
        --net0 virtio,bridge=vmbr0
        --ide2 {{ vm.storage }}:cloudinit
        --boot c
        --bootdisk scsi0

    - name: Verificar la existencia de la imagen
      stat:
        path: "{{ vm.cloud_image }}"
      register: image_stat

    - name: Fallar si la imagen no existe
      fail:
        msg: "La imagen {{ vm.cloud_image }} no existe en el servidor."
      when: not image_stat.stat.exists

    - name: Importar el disco de cloud-init
      command: >
        qm importdisk {{ vm.vmid }} {{ vm.cloud_image }} {{ vm.storage }}

    - name: Adjuntar el disco importado a la VM
      command: >
        qm set {{ vm.vmid }}
        --scsihw virtio-scsi-pci
        --scsi0 {{ vm.storage }}:vm-{{ vm.vmid }}-disk-0

    - name: Crear el directorio de snippets si no existe
      file:
        path: /var/lib/vz/snippets
        state: directory
        mode: '0755'

    - name: Eliminar archivos de configuración anteriores en snippets
      file:
        path: /var/lib/vz/snippets/user_data_{{ vm.vmid }}
        state: absent

    - name: Crear el archivo user-data
      copy:
        content: |
          #cloud-config
          users:
            - name: {{ vm.user }}
              hashed_passwd: "{{ encrypted_password.stdout }}"
              groups: sudo
              shell: /bin/bash
              lock_passwd: false
              ssh_pwauth: True

 sudo: ALL=(ALL) NOPASSWD:ALL
          ssh_pwauth: True
          keyboard:
            layout: es
            variant: ''
          network:
            version: 2
            ethernets:
              ens18:
                dhcp4: no
                addresses:
                  - {{ vm.static_ip }}/24
                gateway4: {{ vm.gateway }}
                nameservers:
                  addresses: [{{ vm.dns_servers.replace(' ', ', ') }}]
          runcmd:
            - [ cloud-init-per, instance, setup, sh, -c, \"echo 'user-data script executed' > /tmp/user_data_executed\" ]
            - [ cloud-init-per, instance, script, /tmp/configure_snort.sh ]
        dest: /var/lib/vz/snippets/user_data_{{ vm.vmid }}
      register: user_data_creation

    - name: Verificar la creación del archivo user-data
      stat:
        path: /var/lib/vz/snippets/user_data_{{ vm.vmid }}
      register: user_data_stat

    - name: Mostrar el estado de la creación del archivo user-data
      debug:
        var: user_data_stat

    - name: Mostrar el contenido del archivo user-data
      command: cat /var/lib/vz/snippets/user_data_{{ vm.vmid }}
      register: user_data_content

    - name: Mostrar el contenido del archivo user-data en debug
      debug:
        var: user_data_content.stdout

    - name: Configurar Cloud-Init
      command: >
        qm set {{ vm.vmid }}
        --cicustom user=local:snippets/user_data_{{ vm.vmid }}

    - name: Deshabilitar la virtualización KVM en la configuración de la VM
      command: >
        qm set {{ vm.vmid }} --kvm 0

    - name: Iniciar la máquina virtual
      command: >
        qm start {{ vm.vmid }}
  - name: Recopilar información de los paquetes instalados
      package_facts:
        manager: auto
      become: yes

    - name: Verificar si Cloud-Init está instalado
      set_fact:
        cloud_init_installed: "{{ 'cloud-init' in ansible_facts.packages }}"
      become: yes

    - name: Instalar Cloud-Init si no está presente
      apt:
        name: cloud-init
        state: present
      when: not cloud_init_installed
      become: yes

    - name: Verificar que Cloud-Init esté habilitado en la VM
      shell: systemctl is-enabled cloud-init
      register: cloud_init_enabled
      become: yes

    - name: Habilitar Cloud-Init si no está habilitado
      command: systemctl enable cloud-init
      when: cloud_init_enabled.stdout != "enabled"
      become: yes

    - name: Reiniciar Cloud-Init para aplicar la configuración
      command: systemctl restart cloud-init
      become: yes

    - name: Crear el directorio de configuración de cloud-init si no existe
      file:
        path: /etc/cloud/cloud.cfg.d
        state: directory
        mode: '0755'
      become: yes

    - name: Verificar la existencia del archivo de configuración de red de cloud-init
      stat:
        path: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
      register: cloud_init_net_stat
      become: yes

    - name: Mostrar el estado del archivo de configuración de red de cloud-init
      debug:
        var: cloud_init_net_stat

    - name: Deshabilitar la configuración automática de red de cloud-init
      copy:
        content: |
          network: {config: disabled}
        dest: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
 - name: Mostrar el estado de creación del archivo de configuración de red de cloud-init
      debug:
        var: cloud_init_net_created

    - name: Crear el directorio de configuración de Netplan si no existe
      file:
        path: /etc/netplan
        state: directory
        mode: '0755'
      become: yes

    - name: Eliminar archivos de configuración anteriores de Netplan
      file:
        path: /etc/netplan/50-cloud-init.yaml
        state: absent
      become: yes

    - name: Instalar netplan en la máquina virtual
      apt:
        name: netplan.io
        state: present
      become: yes

    - name: Configurar la red en la máquina virtual usando Netplan
      copy:
        content: |
          network:
            version: 2
            ethernets:
              ens18:
                dhcp4: no
                addresses:
                  - {{ vm.static_ip }}/24
                gateway4: {{ vm.gateway }}
                nameservers:
                  addresses: [{{ vm.dns_servers.replace(' ', ', ') }}]
        dest: /etc/netplan/50-cloud-init.yaml
      become: yes

    - name: Aplicar la configuración de red
      command: netplan apply
      become: yes

    - name: Verificar la puerta de enlace predeterminada
      shell: ip route show default
      register: gateway_result

    - name: Mostrar puerta de enlace predeterminada
      debug:
        var: gateway_result

    - name: Probar conectividad a la puerta de enlace predeterminada
      shell: ping -c 4 $(ip route show default | awk '/default/ {print $3}')
      register: gateway_ping_result
      ignore_errors: yes

    - name: Mostrar resultado del ping a la puerta de enlace
      debug:
        var: gateway_ping_result

    - name: Probar conectividad a Internet
      shell: ping -c 4 8.8.8.8
      register: internet_ping_result
      ignore_errors: yes

    - name: Mostrar resultado del ping a 8.8.8.8
      debug:
        var: internet_ping_result

    - name: Copiar el script de configuración a la máquina virtual
      copy:
        src: /home/carlos/proyecto/scripts/configure_snort.sh
        dest: /tmp/configure_snort.sh
        mode: '0755'
        remote_src: no

    - name: Asegurarse de que el script de configuración tenga permisos de ejecución
      command: chmod +x /tmp/configure_snort.sh
      become: yes

    - name: Verificar la existencia del script de configuración
      stat:
        path: /tmp/configure_snort.sh
      register: configure_snort_stat
      become: yes

    - name: Mostrar el estado de existencia del script de configuración
      debug:
        var: configure_snort_stat

    - name: Ejecutar el script de configuración en la máquina virtual
      shell: /tmp/configure_snort.sh
      become: yes
      when: configure_snort_stat.stat.exists

    - name: Mostrar resultado del inicio
      debug:
        var: start_vm

    - name: Mostrar resultado del despliegue
      debug:
        var: deploy_vm
